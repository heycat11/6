class Graph:
    def __init__(self, vertices):
        self.v = vertices

    def printSolution (self, reach):
        print ("Following matrix transitive closure of the given graph ") 
        for i in range (self.v):
            for j in range (self.v):
                print ("%7d\t" % (reach [i][j]), end="") 
            print (" ")
    
    def transitiveClosure(self, graph):
        reach = [i[:] for i in graph]
        for k in range (self.v):
            for i in range (self.v):
                for j in range (self.v):
                    reach[i][j] = reach[i][j] or (reach[i][k] and reach[k][j])
        self.printSolution (reach)

g = Graph (4)
graph = [[0, 1, 0, 0],
         [0, 0, 0, 1],
         [0, 0, 0, 0],
         [1, 0, 1, 0]]
g.transitiveClosure (graph)
